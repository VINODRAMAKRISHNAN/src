// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace test_app_build.readyapi.tests.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("Test1")]
    public partial class Test1Feature
    {
        
        private TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "Test1.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Test1", "\tIn order to avoid silly mistakes\r\n\tAs a math idiot\r\n\tI want to be told the sum o" +
                    "f two numbers", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("Test Student Rest Api")]
        [NUnit.Framework.CategoryAttribute("mytag")]
        public virtual void TestStudentRestApi()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Test Student Rest Api", new string[] {
                        "mytag"});
#line 7
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "inputentity"});
            table1.AddRow(new string[] {
                        "{\'id\':1,\'name\':\'aaa\',\'age\':11,\'status\':true,\'stAddress\':{\'street\':\'st1\',\'zip\':\'40" +
                            "00\'}}"});
            table1.AddRow(new string[] {
                        "{\'id\':2,\'name\':\'aaa2\',\'age\':112,\'status\':true,\'stAddress\':{\'street\':\'st2\',\'zip\':\'" +
                            "5000\'}}"});
            table1.AddRow(new string[] {
                        "{\'id\':3,\'name\':\'aaa3\',\'age\':113,\'status\':true,\'stAddress\':{\'street\':\'st3\',\'zip\':\'" +
                            "6000\'}}"});
#line 8
 testRunner.Given("I have provided REST API request input student entity as in the below table:", ((string)(null)), table1, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "St-id",
                        "St-name",
                        "St-age",
                        "St-status",
                        "Ad-street",
                        "Ad-zip"});
            table2.AddRow(new string[] {
                        "1",
                        "aaa",
                        "11",
                        "true",
                        "st1",
                        "4000"});
            table2.AddRow(new string[] {
                        "2",
                        "aaa2",
                        "112",
                        "true",
                        "st2",
                        "5000"});
            table2.AddRow(new string[] {
                        "3",
                        "aaa3",
                        "113",
                        "true",
                        "st3",
                        "6000"});
#line 14
 testRunner.Then("I execute POST API and the response result should be validated against the follow" +
                    "ing table:", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
